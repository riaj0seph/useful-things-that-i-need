#include <bits/stdc++.h>

//CHECKED

typedef struct NODE{
    float probability;
    int code;
    char charac;
    struct NODE *left,*right;
}node;

using namespace std;

void bubblesort(vector<float>*arr,vector<char>*arrc,vector<node*>*arrp){
    for(int i=0;i<arr->size()-1;i++){
        for(int j=0;j<arr->size()-1-i;j++){
            if((*arr)[j]>(*arr)[j+1]){
                swap((*arr)[j],(*arr)[j+1]);
                swap((*arrc)[j],(*arrc)[j+1]);
                swap((*arrp)[j],(*arrp)[j+1]);
            }
        }
    }
}//sort in ascending

void preorderdisplaytree(node* root){
    if(root!=NULL){
    cout<<"This runs\n";
    cout << root->probability << " -> " << root->code << endl;
    if (root->charac != '\0') { // Only print leaf nodes
            cout << root->charac << " -> " << root->code << endl;
    }
    preorderdisplaytree(root->left);
    preorderdisplaytree(root->right);
    }
    else{
        cout<<"Help\n";
    }
}


node* buildtree(vector<float>*arr,vector<char>*arrc,vector<node*>*arrp){
    while((*arr).size()>=2){
        node* newnode1 = (*arrp)[0];//new node{ (*arr)[0], -1, (*arrc)[0], nullptr, nullptr};
        (*arr).erase((*arr).begin());
        (*arrc).erase((*arrc).begin());
        (*arrp).erase((*arrp).begin());
        node* newnode2 = (*arrp)[0];//new node{ (*arr)[0], -1, (*arrc)[0], nullptr, nullptr};
   
        (*arr).erase((*arr).begin());
        (*arrc).erase((*arrc).begin());
        (*arrp).erase((*arrp).begin());

        //combine these two
        node* newnode3 = new node();
        newnode3->charac='\0';
        newnode3->code=-1;
        newnode3->left=newnode1;
        newnode3->right=newnode2;
        newnode3->probability=newnode1->probability+newnode2->probability;
        (*arr).insert((*arr).begin(),newnode3->probability);
        (*arrc).insert((*arrc).begin(),newnode3->charac);
        (*arrp).insert((*arrp).begin(),newnode3);
        bubblesort(arr,arrc,arrp);
        //return buildtree(arr,arrc,arrp);
    }
    //else{
        return (*arrp)[0];
    //}
}


void huffmanassign(node* root){
    if(root!=NULL){
        if(root->left!=NULL){
            root->left->code=1;
        }
        if(root->right!=NULL){
            root->right->code=0;
        }
        huffmanassign(root->left);
        huffmanassign(root->right);
    }
}

void displayeasierformetounderstand(node* root){
    if(root!=NULL){
    cout<<root->charac<<" "<<root->probability<<" "<<root->code;
    cout<<'\n';
    if(root->left!=NULL){
    cout<<"Left node of this"<<root->charac<<" is: ";
    displayeasierformetounderstand(root->left);}
    if(root->right!=NULL){
    cout<<"Right node of this"<<root->charac<<" is: ";}
    displayeasierformetounderstand(root->right);
}}

int main(){
    string str="helloworld";
    map<char,int>mp;
    for(int i=0;i<str.length();i++){
        if(mp.find(str[i])==mp.end()){
            mp[str[i]]=0;
        }
        mp[str[i]]++;
    }
    int total=0;
    for(auto itr=mp.begin();itr!=mp.end();itr++){
        total+=itr->second;
    }
    //mp has character and probability;
    vector<float>prob;
    vector<char>characlist;
    vector<node*>arrpoint;
    for(auto itr=mp.begin();itr!=mp.end();itr++){
        node* newnode=new node{ (float)itr->second/total, -1, itr->first, nullptr, nullptr};
        characlist.push_back(itr->first);
        float probab=(float)itr->second/total;
        prob.push_back(probab);
        arrpoint.push_back(newnode);
    }
    bubblesort(&prob,&characlist,&arrpoint);
    //we now have a vector with sorted probabilities in asc and their respective characters in the other vector [CHECKED]
    for(int i=0;i<prob.size();i++){
        cout<<prob[i]<<',';
        cout<<characlist[i]<<endl;
        
    }
    node* root=buildtree(&prob,&characlist,&arrpoint);
    huffmanassign(root);
    //preorderdisplaytree(root);
    displayeasierformetounderstand(root);
}
